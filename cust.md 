import frappe
from frappe import _
from frappe.model.naming import set_name_from_naming_options

@frappe.whitelist()
def get_student_details(student):
    student_details = frappe.db.sql("""
        SELECT name, student_name, first_name, middle_name, last_name, gender, date_of_birth, student_email_id
        FROM `tabStudent`
        WHERE name = %s
    """, student, as_dict=True)

    return student_details

@frappe.whitelist()
def get_employee_details(employee):
    employee_details = frappe.db.sql("""
        SELECT name, employee_name, first_name, middle_name, last_name, gender, date_of_birth
        FROM `tabEmployee`
        WHERE name = %s
    """, employee, as_dict=True)
    
    return employee_details

def create_customer_from_student(student):
    """Create a Customer record from Student data"""
    if frappe.db.exists("Customer", student.name):
        return None
        
    # Create customer with student ID as name
    customer_data = {
        "doctype": "Customer",
        "name": student.name,  # Force the name to be student ID
        "customer_type": "Individual",
        "customer_name": student.student_name,
        "student_id": student.name,
        "customer_group": "Student"
    }
    
    try:
        doc = frappe.get_doc(customer_data)
        # Override autoname
        doc.flags.ignore_permissions = True
        doc.flags.ignore_links = True
        doc.flags.ignore_mandatory = True
        # Force the name to be student ID
        doc.name = student.name
        # Bypass naming series and validation
        doc.flags.ignore_validate = True
        doc.flags.ignore_naming_series = True
        # Insert directly into database
        doc.db_insert()
        frappe.db.commit()
        return frappe.get_doc("Customer", student.name)
    except Exception as e:
        frappe.log_error(
            f"Failed to create Customer for student {student.name}: {str(e)}",
            "Customer Creation Error"
        )
        return None

def map_student_gender_to_patient(student_gender):
    """Map student gender to valid Patient gender value"""
    # Default mapping
    gender_mapping = {
        "M": "Male",
        "F": "Female",
        "MALE": "Male",
        "FEMALE": "Female",
        "OTHER": "Other"
    }
    
    if not student_gender:
        return None
        
    mapped_gender = gender_mapping.get(student_gender.upper(), student_gender.title())
    
    # Check if mapped gender exists in Gender doctype
    if frappe.db.exists("Gender", mapped_gender):
        return mapped_gender
    
    # If mapping fails, return None to use system default
    return None

#### Custom code
@frappe.whitelist()
def get_new_students():
    try:
        # Get students who are not already linked to a Patient record
        existing_patients = frappe.db.get_all("Patient", 
            fields=["student_id", "name", "patient_name"],
            filters={"student_id": ["is", "set"]}
        )
        existing_customers = frappe.db.get_all("Customer", 
            fields=["student_id", "name", "customer_name"],
            filters={"student_id": ["is", "set"]}
        )
        
        # Create lookup dictionaries for faster validation
        patient_map = {p.student_id: p for p in existing_patients}
        customer_map = {c.student_id: c for c in existing_customers}
        # Only filter by existing patient IDs
        existing_ids = list(patient_map.keys())
        
        students = frappe.get_all(
            "Student",
            filters={"name": ["not in", existing_ids]},
            fields=["name", "first_name", "middle_name", "last_name", "date_of_birth", "gender", "student_name"]
        )

        if not students:
            return {
                "status": "error",
                "message": _("No new students found to add as patients."),
                "details": {
                    "skipped_students": []
                }
            }

        new_patient_count = 0
        skipped_students = []

        for student in students:
            # Detailed validation check
            validation_result = validate_student_id(student.name, patient_map, customer_map)
            if not validation_result["valid"]:
                skipped_students.append({
                    "id": student.name,
                    "name": student.student_name,
                    "reason": validation_result["reason"]
                })
                continue
            
            # Create Customer record first
            customer = create_customer_from_student(student)
            if not customer:
                skipped_students.append({
                    "id": student.name,
                    "name": student.student_name,
                    "reason": _("Failed to create Customer record")
                })
                continue
            
            # Map student gender to valid Patient gender
            mapped_gender = map_student_gender_to_patient(student.gender)
            
            # Prepare Patient data
            patient_data = {
                "doctype": "Patient",
                "name": student.name,  # Use student ID as primary identifier
                "patient_name": student.student_name,  # Use full name in patient_name field
                "first_name": student.first_name,
                "middle_name": student.middle_name,
                "last_name": student.last_name,
                "dob": student.date_of_birth,
                "sex": mapped_gender,
                "student_id": student.name,
                "customer": customer.name  # Link to the newly created Customer
            }

            # Insert new Patient record
            try:
                doc = frappe.get_doc(patient_data)
                # Override autoname
                doc.flags.ignore_permissions = True
                doc.flags.ignore_links = True
                doc.flags.ignore_validate = True
                doc.flags.ignore_mandatory = True
                doc.flags.ignore_naming_series = True
                # Force the name to be student ID
                doc.name = student.name
                # Insert directly into database
                doc.db_insert()
                frappe.db.commit()
                new_patient_count += 1
            except Exception as e:
                error_msg = str(e)
                skipped_students.append({
                    "id": student.name,
                    "name": student.student_name,
                    "reason": _("Creation failed: {0}").format(error_msg)
                })
                frappe.log_error(
                    f"Failed to create Patient for student {student.name}: {error_msg}",
                    "Patient Creation Error"
                )

        # Construct the final response with detailed information
        if new_patient_count > 0:
            status = "success"
            message = _("Successfully created {0} new patient records.").format(new_patient_count)
        else:
            status = "warning"
            message = _("No new patients were added.")

        return {
            "status": status,
            "message": message,
            "details": {
                "created_count": new_patient_count,
                "skipped_students": skipped_students
            }
        }

    except Exception as e:
        error_msg = str(e)
        frappe.log_error(f"Error in get_new_students: {error_msg}", "Get New Students Error")
        return {
            "status": "error",
            "message": _("An error occurred while processing students."),
            "details": {
                "error": error_msg,
                "skipped_students": []
            }
        }

def validate_student_id(student_id, patient_map, customer_map):
    """Validate student_id against existing Patient records only"""
    if student_id in patient_map:
        return {
            "valid": False,
            "reason": _("Already linked to Patient: {0} ({1})").format(
                patient_map[student_id].name,
                patient_map[student_id].patient_name
            )
        }
    
    # We no longer validate against customers since we create them
    return {
        "valid": True,
        "reason": None
    }
